/**
 * Type guard to check if the thrown error is a SerializedError
 */
export declare const isSerializedError: (error: any) => error is SerializedError;
/**
 * Base type for all errors thrown by the Serialized client
 */
export declare abstract class SerializedError extends Error {
    readonly isSerializedError: boolean;
    protected constructor(message?: string);
}
/**
 * Type guard to check if the thrown error is a SerializedApiError
 */
export declare const isSerializedApiError: (error: any) => error is SerializedApiError;
/**
 * Thrown when the API returns an error code. This is normally wrapped by the client classes to more use-case specific errors.
 */
export declare class SerializedApiError extends SerializedError {
    readonly statusCode: number;
    readonly data?: any;
    isSerializedApiError: boolean;
    constructor(statusCode: number, data?: any);
}
/**
 * Type guard to check if the thrown error is an UnexpectedClientError
 */
export declare const isUnexpectedClientError: (error: any) => error is UnexpectedClientError;
/**
 * Thrown if an unexpected error occurs in the client
 */
export declare class UnexpectedClientError extends SerializedError {
    cause: Error;
    constructor(cause: Error);
}
/**
 * Type guard to check if the thrown error is a ProjectionNotFound
 */
export declare const isProjectionDefinitionNotFound: (error: any) => error is ProjectionDefinitionNotFound;
/**
 * Thrown when calling projection definition endpoints for a projection definition that does not exist.
 */
export declare class ProjectionDefinitionNotFound extends SerializedApiError {
    readonly projectionName: string;
    constructor(projectionName: string);
}
/**
 * Type guard to check if the thrown error is a ProjectionNotFound
 */
export declare const isProjectionNotFound: (error: any) => error is ProjectionNotFound;
/**
 * Thrown when trying to load a projection that does not exist.
 */
export declare class ProjectionNotFound extends SerializedApiError {
    readonly projectionName: string;
    readonly projectionId?: string;
    constructor(projectionName: string, projectionId?: string);
}
/**
 * Type guard to check if the thrown error is a AggregateNotFound
 */
export declare const isAggregateNotFound: (error: any) => error is AggregateNotFound;
/**
 * Thrown when trying to load an aggregate that does not exist.
 */
export declare class AggregateNotFound extends SerializedApiError {
    readonly aggregateType: string;
    readonly aggregateId: string;
    constructor(aggregateType: string, aggregateId: string);
}
/**
 * Type guard to check if the thrown error is a StateLoadingError
 */
export declare const isStateLoadingError: (error: any) => error is StateLoadingError;
/**
 * Thrown by the aggregate client when the state loading of the Aggregate fails.
 */
export declare class StateLoadingError extends SerializedError {
    constructor(message?: string);
}
/**
 * Type guard to check if the thrown error is a ProjectionNotFound
 */
export declare const isConfigurationError: (error: any) => error is ConfigurationError;
/**
 * Thrown when there is a configuration error in the client setup.
 */
export declare class ConfigurationError extends SerializedError {
    constructor(message?: string);
}
/**
 * Type guard to check if the thrown error is a ProjectionNotFound
 */
export declare const isConflict: (error: any) => error is Conflict;
/**
 * Thrown when there is a version conflict when saving an aggregate using the expectedVersion argument. Either via the create or update methods in the AggregatesClient.
 */
export declare class Conflict extends SerializedApiError {
    readonly aggregateType: string;
    readonly aggregateId: string;
    readonly expectedVersion: number;
    constructor(aggregateType: string, aggregateId: string, expectedVersion: number);
}
/**
 * Type guard to check if the thrown error is a UnauthorizedError
 */
export declare const isUnauthorizedError: (error: any) => error is UnauthorizedError;
/**
 * Thrown when using invalid access keys.
 */
export declare class UnauthorizedError extends SerializedApiError {
    readonly requestUrl: string;
    constructor(requestUrl: string);
}
/**
 * Type guard to check if the thrown error is a RateLimitExceeded
 */
export declare const isRateLimitExceeded: (error: any) => error is RateLimitExceeded;
/**
 * Thrown when you exceeded the rate limit for the current time period.
 */
export declare class RateLimitExceeded extends SerializedApiError {
    constructor();
}
/**
 * Type guard to check if the thrown error is a ServiceUnavailable
 */
export declare const isServiceUnavailable: (error: any) => error is ServiceUnavailable;
/**
 * Thrown when the API is temporarily unavailable for some reason.
 */
export declare class ServiceUnavailable extends SerializedApiError {
    readonly requestUrl: any;
    constructor(requestUrl: any);
}
