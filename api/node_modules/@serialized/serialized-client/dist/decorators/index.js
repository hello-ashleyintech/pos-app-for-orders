"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
function Aggregate(aggregateType, eventHandlersType) {
    return function handlesEventsFor(constructor) {
        var proxy;
        try {
            proxy = new Function('constructor', 'aggregateType', 'eventHandlersType', "\n        'use strict';\n        return class extends constructor {\n            aggregateType = aggregateType;\n            initialState = eventHandlersType.prototype.initialState;\n            eventHandlers = eventHandlersType.eventHandlers;\n            defaultHandler = eventHandlersType.defaultHandler;\n        };\n    ")(constructor, aggregateType, eventHandlersType);
        }
        catch (_a) {
            proxy = /** @class */ (function (_super) {
                __extends(class_1, _super);
                function class_1() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.aggregateType = aggregateType;
                    _this.initialState = eventHandlersType.prototype.initialState;
                    _this.eventHandlers = eventHandlersType.eventHandlers;
                    _this.defaultHandler = eventHandlersType.defaultHandler;
                    return _this;
                }
                return class_1;
            }(constructor));
        }
        return proxy;
    };
}
exports.Aggregate = Aggregate;
function EventHandler(type) {
    return function (target, propertyKey, descriptor) {
        if (!target.constructor.eventHandlers) {
            target.constructor.eventHandlers = {};
        }
        target.constructor.eventHandlers[type.name] = descriptor.value;
    };
}
exports.EventHandler = EventHandler;
function DefaultHandler() {
    return function (target, propertyKey, descriptor) {
        target.constructor.defaultHandler = descriptor.value;
    };
}
exports.DefaultHandler = DefaultHandler;
