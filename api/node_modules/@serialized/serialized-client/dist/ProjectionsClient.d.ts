import { BaseClient } from "./";
import { UnauthorizedError } from "./error";
export declare type ProjectionSort = 'projectionId' | 'reference' | 'createdAt' | 'updatedAt' | '-projectionId' | '-reference' | '-createdAt' | '-updatedAt' | '+projectionId' | '+reference' | '+createdAt' | '+updatedAt';
export interface ListSingleProjectionOptions {
    reference?: string;
    tenantId?: string;
    sort?: ProjectionSort;
    skip?: number;
    limit?: number;
    id?: string[];
}
export interface DeleteProjectionOptions {
    tenantId?: string;
}
export interface GetSingleProjectionOptions {
    tenantId?: string;
    awaitCreation?: number;
}
export interface GetSingleProjectionResponse {
    projectionId: string;
    createdAt: number;
    updatedAt: number;
    data: any;
}
export declare enum ProjectionType {
    SINGLE = "SINGLE",
    AGGREGATED = "AGGREGATED"
}
export interface DeleteProjectionsRequest {
    projectionType: ProjectionType;
    projectionName: string;
}
export interface GetAggregatedProjectionResponse {
    projectionId: string;
    createdAt: number;
    updatedAt: number;
    data: any;
}
export interface GetAggregatedProjectionRequest {
    projectionName: string;
}
export interface RecreateAggregatedProjectionRequest {
    projectionName: string;
}
export interface CustomProjectionHandler {
    eventType: string;
    functionUri: string;
}
export interface JsonPathFunction {
    function: string;
    targetSelector?: string;
    eventSelector?: string;
    targetFilter?: string;
    eventFilter?: string;
    rawData?: any;
}
export interface JsonPathHandler {
    eventType: string;
    functions: JsonPathFunction[];
}
export interface LoadProjectionDefinitionResponse {
    projectionName: string;
    feedName: string;
    handlers: CustomProjectionHandler[] | JsonPathHandler[];
}
export interface CreateProjectionDefinitionRequest {
    projectionName: string;
    feedName: string;
    handlers: CustomProjectionHandler[] | JsonPathHandler[];
    aggregated?: boolean;
    idField?: string;
    signingSecret?: string;
}
export interface DeleteProjectionDefinitionRequest {
    projectionName: string;
}
export interface GetProjectionDefinitionRequest {
    projectionName: string;
}
export interface RecreateSingleProjectionsRequest {
    projectionName: string;
}
export interface ListSingleProjectionsResponse {
    projections: GetSingleProjectionResponse[];
    hasMore: boolean;
    totalCount: number;
}
export interface GetSingleProjectionRequest {
    projectionName: string;
    projectionId: string;
}
export interface ListSingleProjectionRequest {
    projectionName: string;
}
export interface CountSingleProjectionRequest {
    projectionName: string;
}
export interface CountSingleProjectionOptions {
    tenantId?: string;
}
export interface CountSingleProjectionResponse {
    count: number;
}
export declare const isUnauthorizedError: (error: any) => error is UnauthorizedError;
export declare class ProjectionsClient extends BaseClient {
    createOrUpdateDefinition(request: CreateProjectionDefinitionRequest): Promise<void>;
    deleteProjectionDefinition(request: DeleteProjectionDefinitionRequest): Promise<void>;
    getProjectionDefinition(request: GetProjectionDefinitionRequest): Promise<LoadProjectionDefinitionResponse>;
    getSingleProjection(request: GetSingleProjectionRequest, options?: GetSingleProjectionOptions): Promise<GetSingleProjectionResponse>;
    getAggregatedProjection(request: GetAggregatedProjectionRequest): Promise<GetAggregatedProjectionResponse>;
    deleteProjections(request: DeleteProjectionsRequest, options?: DeleteProjectionOptions): Promise<void>;
    listSingleProjections(request: ListSingleProjectionRequest, options?: ListSingleProjectionOptions): Promise<ListSingleProjectionsResponse>;
    countSingleProjections(request: CountSingleProjectionRequest, options?: CountSingleProjectionOptions): Promise<number>;
    recreateSingleProjections(request: RecreateSingleProjectionsRequest, options?: DeleteProjectionOptions): Promise<void>;
    recreateAggregatedProjection(request: RecreateAggregatedProjectionRequest, options?: DeleteProjectionOptions): Promise<void>;
    private handleApiError;
    private handleAxiosError;
    static projectionDefinitionUrl(projectionName: string): string;
    static singleProjectionUrl(projectionName: string, projectionId: string): string;
    static aggregatedProjectionUrl(projectionName: string): string;
    static singleProjectionsUrl(projectionName: string): string;
    static singleProjectionsCountUrl(projectionName: string): string;
}
