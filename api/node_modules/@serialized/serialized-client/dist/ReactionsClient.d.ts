import { BaseClient } from "./";
export interface HttpAction {
    actionType: 'HTTP_POST';
    targetUri: string;
    signingSecret?: string;
}
export interface IftttAction {
    actionType: 'IFTTT_POST';
    targetUri: string;
    valueMap?: object;
}
export interface AutomateAction {
    actionType: 'AUTOMATE_POST';
    targetUri: string;
    valueMap?: object;
}
export interface ZapierAction {
    actionType: 'ZAPIER_POST';
    targetUri: string;
    valueMap?: object;
}
export interface SlackAction {
    actionType: 'SLACK_POST';
    targetUri: string;
    body?: object;
}
export declare type Action = HttpAction | SlackAction | IftttAction | AutomateAction | ZapierAction;
export interface ScheduledReaction {
    reactionId: string;
    reactionName: string;
    aggregateType: string;
    aggregateId: string;
    eventId: string;
    createdAt: number;
    triggerAt: number;
}
export interface TriggeredReaction {
    reactionId: string;
    reactionName: string;
    aggregateType: string;
    aggregateId: string;
    eventId: string;
    createdAt: number;
    finishedAt: number;
}
export interface LoadScheduledReactionsResponse {
    reactions: ScheduledReaction[];
}
export interface GetReactionDefinitionRequest {
    reactionName: string;
}
export interface DeleteScheduledReactionRequest {
    reactionId: string;
}
export interface ExecuteScheduledReactionRequest {
    reactionId: string;
}
export interface ListScheduledReactionOptions {
    tenantId?: string;
}
export interface ListTriggeredReactionOptions {
    tenantId?: string;
}
export interface ExecuteScheduledReactionOptions {
    tenantId?: string;
}
export interface ReExecuteTriggeredReactionOptions {
    tenantId?: string;
}
export interface DeleteScheduledReactionOptions {
    tenantId?: string;
}
export interface LoadTriggeredReactionsResponse {
    reactions: TriggeredReaction[];
}
export interface ReExecuteTriggeredReactionRequest {
    reactionId: string;
}
export interface CreateReactionDefinitionRequest {
    reactionName: string;
    feedName: string;
    reactOnEventType: string;
    action: Action;
    cancelOnEventTypes?: string[];
    triggerTimeField?: string;
    offset?: string;
}
export interface LoadReactionDefinitionResponse {
    reactionName: string;
    feedName: string;
    reactOnEventType: string;
    action: Action;
    cancelOnEventTypes?: string[];
    triggerTimeField?: string;
    offset?: string;
}
export interface LoadReactionDefinitionsResponse {
    definitions: string;
}
export declare class ReactionsClient extends BaseClient {
    createOrUpdateReactionDefinition(request: CreateReactionDefinitionRequest): Promise<void>;
    listReactionDefinitions(): Promise<LoadReactionDefinitionsResponse>;
    getReactionDefinition(request: GetReactionDefinitionRequest): Promise<LoadReactionDefinitionResponse>;
    listScheduledReactions(options?: ListScheduledReactionOptions): Promise<LoadScheduledReactionsResponse>;
    deleteScheduledReaction(request: DeleteScheduledReactionRequest, options?: DeleteScheduledReactionOptions): Promise<void>;
    deleteTriggeredReaction(request: DeleteScheduledReactionRequest, options?: DeleteScheduledReactionOptions): Promise<void>;
    executeScheduledReaction(request: ExecuteScheduledReactionRequest, options?: ExecuteScheduledReactionOptions): Promise<void>;
    listTriggeredReactions(options?: ListTriggeredReactionOptions): Promise<LoadTriggeredReactionsResponse>;
    reExecuteTriggeredReaction(request: ReExecuteTriggeredReactionRequest, options?: ReExecuteTriggeredReactionOptions): Promise<void>;
    static reactionDefinitionsUrl(): string;
    static reactionDefinitionUrl(reactionName: string): string;
    static scheduledReactionsUrl(): string;
    static scheduledReactionUrl(reactionId: string): string;
    static triggeredReactionsUrl(): string;
    static triggeredReactionUrl(reactionId: string): string;
}
