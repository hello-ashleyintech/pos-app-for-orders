"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var axios_1 = __importDefault(require("axios"));
var error_1 = require("./error");
var SERIALIZED_ACCESS_KEY_HEADER = 'Serialized-Access-Key';
var SERIALIZED_SECRET_ACCESS_KEY_HEADER = 'Serialized-Secret-Access-Key';
var BaseClient = /** @class */ (function () {
    function BaseClient(config) {
        var axiosClient = axios_1.default.create({
            baseURL: "https://api.serialized.io",
            withCredentials: true,
            maxRedirects: 0,
            headers: {
                Accept: 'application/json',
                'Serialized-Access-Key': config.accessKey,
                'Serialized-Secret-Access-Key': config.secretAccessKey
            }
        });
        axiosClient.interceptors.response.use(function (response) {
            return response;
        }, function (error) {
            if (error.config && error.config.headers) {
                if (error.config.headers[SERIALIZED_ACCESS_KEY_HEADER]) {
                    error.config.headers[SERIALIZED_ACCESS_KEY_HEADER] = '******';
                }
                if (error.config.headers[SERIALIZED_SECRET_ACCESS_KEY_HEADER]) {
                    error.config.headers[SERIALIZED_SECRET_ACCESS_KEY_HEADER] = '******';
                }
            }
            if (axios_1.default.isAxiosError(error)) {
                if (error.response.status === 401) {
                    return Promise.reject(new error_1.UnauthorizedError(error.config.url));
                }
                else if (error.response.status === 429) {
                    return Promise.reject(new error_1.RateLimitExceeded());
                }
                else if (error.response.status === 503) {
                    return Promise.reject(new error_1.ServiceUnavailable(error.config.url));
                }
                else {
                    return Promise.reject(new error_1.SerializedApiError(error.response.status));
                }
            }
            else {
                return Promise.reject(new error_1.UnexpectedClientError(error));
            }
        });
        this.axiosClient = axiosClient;
        this.config = config;
    }
    BaseClient.prototype.axiosConfig = function (tenantId) {
        var additionalHeaders = {};
        if (tenantId) {
            Object.assign(additionalHeaders, { 'Serialized-Tenant-Id': tenantId });
        }
        return {
            headers: Object.assign({}, additionalHeaders)
        };
    };
    return BaseClient;
}());
exports.BaseClient = BaseClient;
