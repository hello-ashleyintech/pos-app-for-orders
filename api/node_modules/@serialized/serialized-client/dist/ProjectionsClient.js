"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var _1 = require("./");
var error_1 = require("./error");
var ProjectionType;
(function (ProjectionType) {
    ProjectionType["SINGLE"] = "SINGLE";
    ProjectionType["AGGREGATED"] = "AGGREGATED";
})(ProjectionType = exports.ProjectionType || (exports.ProjectionType = {}));
exports.isUnauthorizedError = function (error) {
    return error.name === 'UnauthorizedError';
};
var ProjectionsClient = /** @class */ (function (_super) {
    __extends(ProjectionsClient, _super);
    function ProjectionsClient() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ProjectionsClient.prototype.createOrUpdateDefinition = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            var url, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = ProjectionsClient.projectionDefinitionUrl(request.projectionName);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.axiosClient.put(url, request, this.axiosConfig())];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _a.sent();
                        throw this.handleAxiosError(e_1, request);
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    ProjectionsClient.prototype.deleteProjectionDefinition = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            var url, e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = ProjectionsClient.projectionDefinitionUrl(request.projectionName);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.axiosClient.delete(url, this.axiosConfig())];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        e_2 = _a.sent();
                        throw this.handleAxiosError(e_2, request);
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    ProjectionsClient.prototype.getProjectionDefinition = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            var url, e_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = ProjectionsClient.projectionDefinitionUrl(request.projectionName);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.axiosClient.get(url, this.axiosConfig())];
                    case 2: return [2 /*return*/, (_a.sent()).data];
                    case 3:
                        e_3 = _a.sent();
                        throw this.handleAxiosError(e_3, request);
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    ProjectionsClient.prototype.getSingleProjection = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            var url, config, params, error_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = ProjectionsClient.singleProjectionUrl(request.projectionName, request.projectionId);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        config = this.axiosConfig();
                        params = new URLSearchParams();
                        if (options) {
                            if (options.tenantId !== undefined) {
                                config = this.axiosConfig(options.tenantId);
                            }
                            if (options.awaitCreation !== undefined) {
                                params.set('awaitCreation', String(options.awaitCreation));
                            }
                        }
                        config.params = params;
                        return [4 /*yield*/, this.axiosClient.get(url, config)];
                    case 2: return [2 /*return*/, (_a.sent()).data];
                    case 3:
                        error_2 = _a.sent();
                        throw this.handleApiError(error_2, request);
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    ProjectionsClient.prototype.getAggregatedProjection = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            var url, error_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = ProjectionsClient.aggregatedProjectionUrl(request.projectionName);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.axiosClient.get(url, this.axiosConfig())];
                    case 2: return [2 /*return*/, (_a.sent()).data];
                    case 3:
                        error_3 = _a.sent();
                        throw this.handleApiError(error_3, request);
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    ProjectionsClient.prototype.deleteProjections = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            var url, config, error_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (request.projectionType == ProjectionType.SINGLE) {
                            url = ProjectionsClient.singleProjectionsUrl(request.projectionName);
                        }
                        else {
                            url = ProjectionsClient.aggregatedProjectionUrl(request.projectionName);
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        config = options && options.tenantId ? this.axiosConfig(options.tenantId) : this.axiosConfig();
                        config.params = new URLSearchParams();
                        return [4 /*yield*/, this.axiosClient.delete(url, config)];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        error_4 = _a.sent();
                        throw this.handleApiError(error_4, request);
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    ProjectionsClient.prototype.listSingleProjections = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            var url, config, params_1, error_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = ProjectionsClient.singleProjectionsUrl(request.projectionName);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        config = this.axiosConfig();
                        params_1 = new URLSearchParams();
                        if (options) {
                            if (options.tenantId !== undefined) {
                                config = this.axiosConfig(options.tenantId);
                            }
                            if (options.limit !== undefined) {
                                params_1.set('limit', options.limit.toString());
                            }
                            if (options.reference !== undefined) {
                                params_1.set('reference', options.reference);
                            }
                            if (options.skip !== undefined) {
                                params_1.set('skip', options.skip.toString());
                            }
                            if (options.sort !== undefined) {
                                params_1.set('sort', options.sort);
                            }
                            if (options.id !== undefined) {
                                options.id.forEach(function (id) {
                                    params_1.append('id', id);
                                });
                            }
                        }
                        config.params = params_1;
                        return [4 /*yield*/, this.axiosClient.get(url, config)];
                    case 2: return [2 /*return*/, (_a.sent()).data];
                    case 3:
                        error_5 = _a.sent();
                        throw this.handleApiError(error_5, request);
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    ProjectionsClient.prototype.countSingleProjections = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            var url, config, data, error_6;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = ProjectionsClient.singleProjectionsCountUrl(request.projectionName);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        config = options && options.tenantId ? this.axiosConfig(options.tenantId) : this.axiosConfig();
                        return [4 /*yield*/, this.axiosClient.get(url, config)];
                    case 2:
                        data = (_a.sent()).data;
                        return [2 /*return*/, data.count];
                    case 3:
                        error_6 = _a.sent();
                        throw this.handleApiError(error_6, request);
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    ProjectionsClient.prototype.recreateSingleProjections = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteProjections({
                            projectionType: ProjectionType.SINGLE,
                            projectionName: request.projectionName
                        }, options)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    ProjectionsClient.prototype.recreateAggregatedProjection = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteProjections({
                            projectionType: ProjectionType.AGGREGATED,
                            projectionName: request.projectionName
                        }, options)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    ProjectionsClient.prototype.handleApiError = function (err, request) {
        if (error_1.isSerializedApiError(err)) {
            if (err.statusCode === 404) {
                return new error_1.ProjectionNotFound(request.projectionName, request.projectionId);
            }
        }
        return err;
    };
    ProjectionsClient.prototype.handleAxiosError = function (err, request) {
        if (error_1.isSerializedApiError(err)) {
            if (err.statusCode === 404) {
                return new error_1.ProjectionDefinitionNotFound(request.projectionName);
            }
        }
        return err;
    };
    ProjectionsClient.projectionDefinitionUrl = function (projectionName) {
        return "/projections/definitions/" + projectionName;
    };
    ProjectionsClient.singleProjectionUrl = function (projectionName, projectionId) {
        return "/projections/single/" + projectionName + "/" + projectionId;
    };
    ProjectionsClient.aggregatedProjectionUrl = function (projectionName) {
        return "/projections/aggregated/" + projectionName;
    };
    ProjectionsClient.singleProjectionsUrl = function (projectionName) {
        return "/projections/single/" + projectionName;
    };
    ProjectionsClient.singleProjectionsCountUrl = function (projectionName) {
        return "/projections/single/" + projectionName + "/_count";
    };
    return ProjectionsClient;
}(_1.BaseClient));
exports.ProjectionsClient = ProjectionsClient;
