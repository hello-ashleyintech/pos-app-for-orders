import { BaseClient } from "./";
export interface FeedEvent {
    eventType: string;
    eventId: string;
    data?: any;
    encryptedData?: number;
}
export interface LoadFeedOptions {
    tenantId?: string;
    since?: number;
    limit?: number;
    from?: string;
    to?: string;
    waitTime?: number;
    types?: string[];
    partitionNumber?: number;
    partitionCount?: number;
}
export interface FeedEntry {
    sequenceNumber: number;
    aggregateId: string;
    timestamp: number;
    feedName: string;
    events: FeedEvent[];
}
export interface FeedOverview {
    aggregateType: string;
    aggregateCount: number;
    batchCount: number;
    eventCount: number;
}
export interface LoadFeedResponse {
    entries: FeedEntry[];
    hasMore: boolean;
    currentSequenceNumber: number;
}
export interface LoadFeedsOverviewResponse {
    feeds: FeedOverview[];
}
export interface FeedRequest {
    feedName: string;
}
export interface LoadFeedRequest extends FeedRequest {
}
export interface LoadAllFeedRequest {
    feedName: string;
    options?: LoadFeedOptions;
}
export declare class FeedsClient extends BaseClient {
    loadOverview(): Promise<LoadFeedsOverviewResponse>;
    loadFeed(request: LoadFeedRequest, options?: LoadFeedOptions): Promise<LoadFeedResponse>;
    loadAllFeed(request: LoadAllFeedRequest): Promise<LoadFeedResponse>;
    getCurrentSequenceNumber(request: FeedRequest): Promise<number>;
    getGlobalSequenceNumber(): Promise<number>;
    static feedsUrl(): string;
    static allFeedUrl(): string;
    static feedUrl(feedName: string): string;
}
