"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var _1 = require("./");
var StateLoader_1 = require("./StateLoader");
var error_1 = require("./error");
var AggregatesClient = /** @class */ (function (_super) {
    __extends(AggregatesClient, _super);
    function AggregatesClient(aggregateTypeConstructor, config) {
        var _this = _super.call(this, config) || this;
        _this.aggregateTypeConstructor = aggregateTypeConstructor;
        var aggregateTypeInstance = new aggregateTypeConstructor.prototype.constructor({});
        if (!aggregateTypeInstance.aggregateType) {
            throw new Error("No aggregateType configured for " + aggregateTypeConstructor.prototype.constructor.name);
        }
        _this.stateLoader = new StateLoader_1.StateLoader(aggregateTypeConstructor);
        _this.aggregateType = aggregateTypeInstance.aggregateType;
        return _this;
    }
    AggregatesClient.prototype.checkExists = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = AggregatesClient.aggregateUrlPath(this.aggregateType, request.aggregateId);
                        return [4 /*yield*/, this.axiosClient.head(url, this.axiosConfig())];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            });
        });
    };
    AggregatesClient.prototype.update = function (aggregateId, commandHandler) {
        return __awaiter(this, void 0, void 0, function () {
            var response, currentVersion, eventsToSave, error_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.loadInternal(aggregateId)];
                    case 1:
                        response = _a.sent();
                        currentVersion = response.metadata.version;
                        eventsToSave = commandHandler(response.aggregate);
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, this.saveInternal(aggregateId, { events: eventsToSave, expectedVersion: currentVersion })];
                    case 3: return [2 /*return*/, _a.sent()];
                    case 4:
                        error_2 = _a.sent();
                        if (error_1.isSerializedApiError(error_2)) {
                            if (error_2.statusCode === 409) {
                                throw new error_1.Conflict(this.aggregateType, aggregateId, currentVersion);
                            }
                        }
                        throw error_2;
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    AggregatesClient.prototype.create = function (aggregateId, commandHandler, options) {
        return __awaiter(this, void 0, void 0, function () {
            var aggregate, eventsToSave, tenantId, error_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        aggregate = new this.aggregateTypeConstructor.prototype.constructor(this.initialState);
                        eventsToSave = commandHandler(aggregate);
                        tenantId = options === null || options === void 0 ? void 0 : options.tenantId;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.saveInternal(aggregateId, { events: eventsToSave, expectedVersion: 0 }, tenantId)];
                    case 2: return [2 /*return*/, _a.sent()];
                    case 3:
                        error_3 = _a.sent();
                        if (error_1.isSerializedApiError(error_3)) {
                            if (error_3.statusCode === 409) {
                                throw new error_1.Conflict(this.aggregateType, aggregateId, 0);
                            }
                        }
                        throw error_3;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    AggregatesClient.prototype.commit = function (aggregateId, commandHandler, options) {
        return __awaiter(this, void 0, void 0, function () {
            var aggregate, commit, tenantId;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        aggregate = new this.aggregateTypeConstructor.prototype.constructor(this.initialState);
                        commit = commandHandler(aggregate);
                        tenantId = options === null || options === void 0 ? void 0 : options.tenantId;
                        return [4 /*yield*/, this.saveInternal(aggregateId, commit, tenantId)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    AggregatesClient.prototype.recordEvent = function (aggregateId, event, options) {
        return __awaiter(this, void 0, void 0, function () {
            var tenantId;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        tenantId = options === null || options === void 0 ? void 0 : options.tenantId;
                        return [4 /*yield*/, this.recordEvents(aggregateId, [event], tenantId)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    AggregatesClient.prototype.recordEvents = function (aggregateId, events, tenantId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.saveInternal(aggregateId, { events: events }, tenantId)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    AggregatesClient.prototype.load = function (aggregateId, options) {
        return __awaiter(this, void 0, void 0, function () {
            var response, error_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.loadInternal(aggregateId, options)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response.aggregate];
                    case 2:
                        error_4 = _a.sent();
                        if (error_1.isSerializedApiError(error_4)) {
                            if (error_4.statusCode === 404) {
                                throw new error_1.AggregateNotFound(this.aggregateType, aggregateId);
                            }
                        }
                        throw error_4;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    AggregatesClient.prototype.loadInternal = function (aggregateId, options) {
        return __awaiter(this, void 0, void 0, function () {
            var url, config, queryParams, axiosResponse, data, currentState, aggregate, metadata;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "" + AggregatesClient.aggregateUrlPath(this.aggregateType, aggregateId);
                        config = options && options.tenantId ? this.axiosConfig(options.tenantId) : this.axiosConfig();
                        queryParams = new URLSearchParams();
                        if (options) {
                            if (options.since) {
                                queryParams.set('since', String(options.since));
                            }
                            if (options.limit) {
                                queryParams.set('limit', String(options.limit));
                            }
                        }
                        config.params = queryParams;
                        return [4 /*yield*/, this.axiosClient.get(url, config)];
                    case 1:
                        axiosResponse = _a.sent();
                        data = axiosResponse.data;
                        currentState = this.stateLoader.loadState(data.events);
                        aggregate = new this.aggregateTypeConstructor.prototype.constructor(currentState);
                        metadata = { version: data.aggregateVersion };
                        aggregate._metadata = metadata;
                        console.log("Loaded aggregate " + this.aggregateType + "@" + aggregateId + ":" + metadata.version);
                        return [2 /*return*/, { aggregate: aggregate, metadata: metadata }];
                }
            });
        });
    };
    AggregatesClient.prototype.deleteAggregate = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            var url, config;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "" + AggregatesClient.aggregateUrlPath(this.aggregateType, request.aggregateId);
                        config = this.axiosConfig();
                        config.params = options;
                        return [4 /*yield*/, this.axiosClient.delete(url, config)];
                    case 1: return [2 /*return*/, (_a.sent())];
                }
            });
        });
    };
    AggregatesClient.prototype.deleteAggregateType = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            var url, config;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "" + AggregatesClient.aggregateTypeUrlPath(request.aggregateType);
                        config = this.axiosConfig();
                        config.params = options;
                        return [4 /*yield*/, this.axiosClient.delete(url, config)];
                    case 1: return [2 /*return*/, (_a.sent())];
                }
            });
        });
    };
    AggregatesClient.prototype.saveInternal = function (aggregateId, commit, tenantId) {
        return __awaiter(this, void 0, void 0, function () {
            var config, url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        config = tenantId ? this.axiosConfig(tenantId) : this.axiosConfig();
                        if (commit.events.length === 0) {
                            return [2 /*return*/, 0];
                        }
                        url = AggregatesClient.aggregateUrlPath(this.aggregateType, aggregateId) + "/events";
                        return [4 /*yield*/, this.axiosClient.post(url, commit, config)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, commit.events.length];
                }
            });
        });
    };
    AggregatesClient.aggregateEventsUrlPath = function (aggregateType, aggregateId) {
        return "/aggregates/" + aggregateType + "/" + aggregateId + "/events";
    };
    AggregatesClient.aggregateUrlPath = function (aggregateType, aggregateId) {
        return "/aggregates/" + aggregateType + "/" + aggregateId;
    };
    AggregatesClient.aggregateTypeUrlPath = function (aggregateType) {
        return "/aggregates/" + aggregateType;
    };
    Object.defineProperty(AggregatesClient.prototype, "initialState", {
        get: function () {
            var aggregateTypeInstance = new this.aggregateTypeConstructor.prototype.constructor({});
            return aggregateTypeInstance.initialState ? aggregateTypeInstance.initialState : {};
        },
        enumerable: true,
        configurable: true
    });
    return AggregatesClient;
}(_1.BaseClient));
exports.AggregatesClient = AggregatesClient;
